[CRAB]

jobtype = cmssw
scheduler = SCHEDULER
### NOTE: just setting the name of the server (pi, lnl etc etc )
###       crab will submit the jobs to the server...
#server_name = bari
###       or let crab chose one server automatically for you 
use_server = USE_SERVER

[CMSSW]

### The data you want to access (to be found on DBS)
datasetpath = DATASET_NAME

### Specify the URL of DBS istance where CRAB has to get the dataset from
dbs_url = http://cmsdbsprod.cern.ch/DBS_INSTANCE/servlet/DBSServlet

### The ParameterSet you want to use
pset = CFG_FILE

### To select a single (list of) run within a single processed dataset define run number (list)
### Selection can be a comma-separated list of run numbers and run number ranges: 1,2,3-4
runselection = RUN_SELECTION

### A JSON file that describes which runs and lumis to process. CRAB will skip luminosity blocks not
### listed in the file. When using this setting, you must also use lumi-based splitting rather than
### event based splitting as shown below.
lumi_mask = LUMI_MASK

### Splitting parameters
total_number_of_lumis = TOTAL_UNITS
total_number_of_events = TOTAL_UNITS
number_of_jobs = N_JOBS

### The output files (comma separated list)
#output_file = OUTPUT_FILES
### Automatically add the EDM output produced via PoolOutputModule
# get_edm_output = 1

### Parameters to be passed to the python config file
pycfg_params = CFG_PARAMETERS

[USER]

### To specify additional files to be put in InputSandBox
### write the full path  if the files are not in the current directory
### (wildcard * are allowed): comma separated list
#additional_input_files = INPUT_FILES

### OUTPUT files Management
##  output back into UI
return_data = 1

### To use a specific name of UI directory where CRAB will create job to submit (with full path).
### the default directory will be "crab_0_data_time"
ui_working_dir = WORKING_DIR

### To specify the UI directory where to store the CMS executable output
### FULL path is mandatory. Default is  <ui_working_dir>/res will be used.
outputdir = OUTPUT_DIR

### To specify the UI directory where to store the stderr, stdout and .BrokerInfo of submitted jobs
### FULL path is mandatory. Default is <ui_working_dir>/res will be used.
#logdir= /full/path/yourLogDir

### OUTPUT files INTO A SE
copy_data = 0
check_user_remote_dir = 0

### FNAL SE
storage_element = T3_US_FNALLPC

### Rutgers SE
# storage_element = ruhex-osgce.rutgers.edu
# storage_path = /srm/v2/server?SFN=/cms/ferencek
# user_remote_dir = /store

### if you want to copy data in a "official CMS site"
### you have to specify the name as written in
#storage_element = T2_IT_Bari
### the user_remote_dir will be created under the SE mountpoint
### in the case of publication this directory is not considered
#user_remote_dir = name_directory_you_want

### if you want to copy your data at CAF
#storage_element = T2_CH_CAF
### the user_remote_dir will be created under the SE mountpoint
### in the case of publication this directory is not considered
#user_remote_dir = name_directory_you_want

### if you want to copy your data to your area in castor at cern
### or in a "not official CMS site" you have to specify the complete name of SE
#storage_element=srm-cms.cern.ch
### this directory is the mountpoin of SE
#storage_path=/srm/managerv2?SFN=/castor/cern.ch/
### directory or tree of directory under the mounpoint
#user_remote_dir = name_directory_you_want


### To publish produced output in a local istance of DBS set publish_data = 1
publish_data = 0
### Specify the dataset name. The full path will be <primarydataset>/<publish_data_name>/USER
publish_data_name = PUBLICATION_NAME
### Specify the URL of DBS istance where CRAB has to publish the output files
dbs_url_for_publication = https://cmsdbsprod.cern.ch:8443/DBS_INSTANCE_writer/servlet/DBSServlet

#if server
#thresholdLevel = 100
#eMail = your@Email.address

[GRID]
#
## RB/WMS management:
rb = CERN

##  Black and White Lists management:
## By Storage
#se_black_list = T0,T1
#se_white_list =

## By ComputingElement
#ce_black_list =
#ce_white_list =

[CONDORG]

# Set this to condor to override the batchsystem defined in gridcat.
#batchsystem = condor

# Specify addition condor_g requirments
# use this requirment to run on a cms dedicated hardare
# globus_rsl = (condor_submit=(requirements 'ClusterName == \"CMS\" && (Arch == \"INTEL\" || Arch == \"X86_64\")'))
# use this requirement to run on the new hardware
#globus_rsl = (condor_submit=(requirements 'regexp(\"cms-*\",Machine)'))

